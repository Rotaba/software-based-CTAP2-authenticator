
from __future__ import division

from binascii import b2a_hex, a2b_hex

from ecdsa import *
# from . import der, ecdsa

class UnknownCurveError(Exception):
    pass

def orderlen(order):
    return (1+len("%x"%order))//2 # bytes

# the NIST curves
class Curve:
    def __init__(self, name, curve, generator, oid, openssl_name=None):
        self.name = name
        self.openssl_name = openssl_name # maybe None
        self.curve = curve
        self.generator = generator
        self.order = generator.order()
        self.baselen = orderlen(self.order)
        self.verifying_key_length = 2*self.baselen
        self.signature_length = 2*self.baselen
        self.oid = oid
        self.encoded_oid = der.encode_oid(*oid)

NIST192p = Curve("NIST192p", ecdsa.curve_192, ecdsa.generator_192,
                 (1, 2, 840, 10045, 3, 1, 1), "prime192v1")
NIST224p = Curve("NIST224p", ecdsa.curve_224, ecdsa.generator_224,
                 (1, 3, 132, 0, 33), "secp224r1")
NIST256p = Curve("NIST256p", ecdsa.curve_256, ecdsa.generator_256,
                 (1, 2, 840, 10045, 3, 1, 7), "prime256v1")
NIST384p = Curve("NIST384p", ecdsa.curve_384, ecdsa.generator_384,
                 (1, 3, 132, 0, 34), "secp384r1")
NIST521p = Curve("NIST521p", ecdsa.curve_521, ecdsa.generator_521,
                 (1, 3, 132, 0, 35), "secp521r1")
SECP256k1 = Curve("SECP256k1", ecdsa.curve_secp256k1, ecdsa.generator_secp256k1,
                  (1, 3, 132, 0, 10), "secp256k1")

curves = [NIST192p, NIST224p, NIST256p, NIST384p, NIST521p, SECP256k1]

def find_curve(oid_curve):
    for c in curves:
        if c.oid == oid_curve:
            return c
    raise UnknownCurveError("I don't know about the curve with oid %s."
                            "I only know about these: %s" %
                            (oid_curve, [c.name for c in curves]))


# SECP256k1 = Curve("SECP256k1", ecdsa.curve_secp256k1, ecdsa.generator_secp256k1,
#                   (1, 3, 132, 0, 10), "secp256k1")
# SECP256k1 is the Bitcoin elliptic curve
from ecdsa import SigningKey

sk = SigningKey.generate(curve=NIST256p)
vk = sk.get_verifying_key()
print(b2a_hex(sk.to_string()))
print(b2a_hex(vk.to_string()))
sig = sk.sign(a2b_hex(b'0021F5FC0B85CD22E60623BCD7D1CA48948909249B4776EB515154E57B66AE12010000002C' +  # noqa
            b'7B89F12A9088B0F5EE0EF8F6718BCCC374249C31AEEBAEB79BD0450132CD536C'))
vk.verify(sig, a2b_hex(b'0021F5FC0B85CD22E60623BCD7D1CA48948909249B4776EB515154E57B66AE12010000002C' +  # noqa
            b'7B89F12A9088B0F5EE0EF8F6718BCCC374249C31AEEBAEB79BD0450132CD536C')) # True

print(b2a_hex(sig))


from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends.openssl.backend import backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from fido2.cose import CoseKey, ES256, RS256, UnsupportedKey
_default_backend = backend
# private_key = ec.generate_private_key(NIST256p, backend)

private_key = ec.generate_private_key(ec.SECP256R1(), default_backend() )
public_key = private_key.public_key()

# data = b'this is some data Id like to sign'
# print(b2a_hex(data))
data2 = b'0021F5FC0B85CD22E60623BCD7D1CA48948909249B4776EB515154E57B66AE12010000002C' + b'7B89F12A9088B0F5EE0EF8F6718BCCC374249C31AEEBAEB79BD0450132CD536C'

signature = private_key.sign( data2, ec.ECDSA(hashes.SHA256()) )
print(signature)
public_key.verify(signature, data2, ec.ECDSA(hashes.SHA256()))

cose_public_key = ES256.from_cryptography_key(public_key)
cose_public_key.verify(data2, signature)
#compre to test pubK
from fido2 import cbor
_ES256_KEY = a2b_hex(b'A5010203262001215820A5FD5CE1B1C458C530A54FA61B31BF6B04BE8B97AFDE54DD8CBB69275A8A1BE1225820FA3A3231DD9DEED9D1897BE5A6228C59501E4BCD12975D3DFF730F01278EA61C')  # noqa
key = CoseKey.parse(cbor.loads(_ES256_KEY)[0])
key.verify(a2b_hex(b'0021F5FC0B85CD22E60623BCD7D1CA48948909249B4776EB515154E57B66AE12010000002C' +  # noqa
                    b'7B89F12A9088B0F5EE0EF8F6718BCCC374249C31AEEBAEB79BD0450132CD536C'),  # noqa
            a2b_hex(b'304402202B3933FE954A2D29DE691901EB732535393D4859AAA80D58B08741598109516D0220236FBE6B52326C0A6B1CFDC6BF0A35BDA92A6C2E41E40C3A1643428D820941E0')  # noqa
        )
print()
print(b'a5010203262001215820643566c206dd00227005fa5de69320616ca268043a38f08bde2e9dc45a5cafaf225820171353b2932434703726aae579fa6542432861fe591e481ea22d63997e1a5290')
print(b2a_hex(cbor.dumps(cose_public_key)))
cos_key = {
            1: 2,
            3: -7,
            -1: 1,
            -2: a2b_hex(b'A5FD5CE1B1C458C530A54FA61B31BF6B04BE8B97AFDE54DD8CBB69275A8A1BE1'),  # noqa
            -3: a2b_hex(b'FA3A3231DD9DEED9D1897BE5A6228C59501E4BCD12975D3DFF730F01278EA61C')  # noqa
        }
print(cose_public_key)
msg1 = b'523e27ce4025341d9e286ab9158109232cccf24478837c6fbbcb289846c57a294100000003f8a011f38c0a4d15800617111f9edc7d0040fe3aac036d14c1e1c65518b698dd1da8f596bc33e11072813466c6bf3845691509b80fb76d59309b8d39e0a93452688f6ca3a39a76f3fc52744fb73948b15783a50102032620012158205c53bf166c9e529eefa3d23236a02ba24a738ab23e7c2ab786e83cc1b1630623225820807fe48cee46ed5e07d20f0093a719d7ad14c01846b1d153a4bd2bccc1b9ad1a523e27ce4025341d9e286ab9158109232cccf24478837c6fbbcb289846c57a29'
sig1 = b'3045022100d75cf3c0d8c3057228583f49f2e742909a4fe26f922f4278f897cfc3448a235b022061f35f09f5c4047d6cc9510e4202706315f725cf3a14ac25569ce88e342c48cf'
sig_og = b'3045022100bf30780c7c91ec4c4aa729ccfa8973c9915a374c20b3e165c24d5a94d5477414022051804e4a70c28706e3d4655d669e856831121ff7316525d80012b98e55298751'
msg_og = b'28cc5df85720da5d5614c13e6cff14f9fc305b5ced7ed5857837987ad7f965f54100000003f8a011f38c0a4d15800617111f9edc7d0040fe3aac036d14c1e1c65518b698dd1da8f596bc33e11072813466c6bf3845691509b80fb76d59309b8d39e0a93452688f6ca3a39a76f3fc52744fb73948b15783a501020326200121582026c486723c502c21b70c6281991af57c7a06c30829b2d14ad730c2448ce01e21225820472898aac6f9abbab6d17b329df63dd638ec2cf5bcc0b95d611507714c39af7028cc5df85720da5d5614c13e6cff14f9fc305b5ced7ed5857837987ad7f965f5'

x5c = a2b_hex(b
